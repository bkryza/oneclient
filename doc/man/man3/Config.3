.TH "Config" 3 "Wed Jul 31 2013" "VeilClient" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Config \- 
.PP
The \fBConfig\fP singleton\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetGlobalConfigFile\fP (string path)"
.br
.RI "\fISets path to global config file\&. \fP"
.ti -1c
.RI "void \fBsetUserConfigFile\fP (string path)"
.br
.RI "\fISets path to user config file\&. \fP"
.ti -1c
.RI "void \fBsetEnv\fP ()"
.br
.RI "\fISaves current CWD and HOME env viariables\&. This is required as FUSE changes them after non-debug start\&. This is also done automatically in \fBConfig::Config\fP\&. \fP"
.ti -1c
.RI "bool \fBparseConfig\fP ()"
.br
.RI "\fIParses config from files set by \fBConfig::setGlobalConfigFile\fP and \fBConfig::setUserConfigFile\fP\&. \fP"
.ti -1c
.RI "template<typename T > T \fBgetValue\fP (string opt)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBConfig\fP & \fBinstance\fP ()"
.br
.RI "\fISingleton instance\&. \fP"
.ti -1c
.RI "template<typename T > static T \fBgetValue\fP (string opt)"
.br
.RI "\fIReturns value of requested option\&. \fP"
.ti -1c
.RI "static string \fBabsPathRelToCWD\fP (string)"
.br
.RI "\fIConverts relative path, to absolute using CWD env as base prefix\&. \fP"
.ti -1c
.RI "static string \fBabsPathRelToHOME\fP (string)"
.br
.RI "\fIConverts relative path, to absolute using HOME env as base prefix\&. \fP"
.ti -1c
.RI "static bool \fBisSet\fP (string)"
.br
.RI "\fIChecks if given option is set\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBConfig\fP ()"
.br
.ti -1c
.RI "template<typename T > T \fBget\fP (string opt)"
.br
.RI "\fIInternal implementation of \fBConfig::getValue\fP\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "string \fBm_globalConfigPath\fP"
.br
.RI "\fIPath to global config file\&. \fP"
.ti -1c
.RI "string \fBm_userConfigPath\fP"
.br
.RI "\fIPath to user config file\&. \fP"
.ti -1c
.RI "string \fBm_envCWD\fP"
.br
.RI "\fISaved CWD env variable\&. \fP"
.ti -1c
.RI "string \fBm_envHOME\fP"
.br
.RI "\fISaved HOME env variable\&. \fP"
.ti -1c
.RI "YAML::Node \fBm_globalNode\fP"
.br
.RI "\fIGlobal config object\&. \fP"
.ti -1c
.RI "YAML::Node \fBm_userNode\fP"
.br
.RI "\fIUser config object\&. \fP"
.ti -1c
.RI "YAML::Node \fBm_envNode\fP"
.br
.RI "\fITemp config object used to manipulate env settings\&. \fP"
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBConfig\fP \fBm_instance\fP"
.br
.RI "\fISingleton instance\&. \fP"
.ti -1c
.RI "static string \fBm_requiredOpts\fP []"
.br
.RI "\fIArray containing required options names\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The \fBConfig\fP singleton\&. 

Parses config files and provides safe access to configuration map\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Config::Config ()\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "string Config::absPathRelToCWD (stringpath)\fC [static]\fP"

.PP
Converts relative path, to absolute using CWD env as base prefix\&. 
.SS "string Config::absPathRelToHOME (stringpath)\fC [static]\fP"

.PP
Converts relative path, to absolute using HOME env as base prefix\&. 
.SS "template<typename T > T Config::get (stringopt)\fC [private]\fP"

.PP
Internal implementation of \fBConfig::getValue\fP\&. \fBSee Also:\fP
.RS 4
\fBConfig::getValue\fP 
.RE
.PP

.SS "template<typename T > static T Config::getValue (stringopt)\fC [static]\fP"

.PP
Returns value of requested option\&. You also need to provide type of returned value\&. Before using this function you should check is option exists, but it's not required\&.
.PP
\fBSee Also:\fP
.RS 4
\fBConfig::isSet\fP 
.RE
.PP
\fBWarning:\fP
.RS 4
If given opition wasn't set, you'll get empty object of given type T ( T() ) 
.RE
.PP

.SS "template<typename T > T Config::getValue (stringopt)"

.SS "\fBConfig\fP & Config::instance ()\fC [static]\fP"

.PP
Singleton instance\&. 
.SS "bool Config::isSet (stringopt)\fC [static]\fP"

.PP
Checks if given option is set\&. \fBSee Also:\fP
.RS 4
\fBConfig::getValue\fP 
.RE
.PP

.SS "bool Config::parseConfig ()"

.PP
Parses config from files set by \fBConfig::setGlobalConfigFile\fP and \fBConfig::setUserConfigFile\fP\&. User config overides global settings\&. If user config declares all required options, global config file isn't required, otherwise it has exists\&. 
.SS "void Config::setEnv ()"

.PP
Saves current CWD and HOME env viariables\&. This is required as FUSE changes them after non-debug start\&. This is also done automatically in \fBConfig::Config\fP\&. 
.SS "void Config::setGlobalConfigFile (stringpath)"

.PP
Sets path to global config file\&. \fBSee Also:\fP
.RS 4
\fBConfig::parseConfig\fP 
.RE
.PP

.SS "void Config::setUserConfigFile (stringpath)"

.PP
Sets path to user config file\&. \fBSee Also:\fP
.RS 4
\fBConfig::parseConfig\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "string Config::m_envCWD\fC [private]\fP"

.PP
Saved CWD env variable\&. 
.SS "string Config::m_envHOME\fC [private]\fP"

.PP
Saved HOME env variable\&. 
.SS "YAML::Node Config::m_envNode\fC [private]\fP"

.PP
Temp config object used to manipulate env settings\&. 
.SS "string Config::m_globalConfigPath\fC [private]\fP"

.PP
Path to global config file\&. \fBSee Also:\fP
.RS 4
\fBConfig::setGlobalConfigFile\fP 
.RE
.PP

.SS "YAML::Node Config::m_globalNode\fC [private]\fP"

.PP
Global config object\&. 
.SS "\fBConfig\fP Config::m_instance\fC [static]\fP, \fC [private]\fP"

.PP
Singleton instance\&. 
.SS "string Config::m_requiredOpts\fC [static]\fP, \fC [private]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    CLUSTER_HOSTNAME_OPT,
    CLUSTER_PORT_OPT,
    PEER_CERTIFICATE_FILE_OPT,
    ENABLE_ENV_OPTION_OVERRIDE
}
.fi
.PP
Array containing required options names\&. 
.SS "string Config::m_userConfigPath\fC [private]\fP"

.PP
Path to user config file\&. \fBSee Also:\fP
.RS 4
\fBConfig::setUserConfigFile\fP 
.RE
.PP

.SS "YAML::Node Config::m_userNode\fC [private]\fP"

.PP
User config object\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for VeilClient from the source code\&.
